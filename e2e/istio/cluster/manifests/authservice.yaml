# Copyright 2025 Tetrate
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: authservice
---
apiVersion: v1
kind: Service
metadata:
  name: authservice
  namespace: authservice
  labels:
    app: authservice
spec:
  ports:
    - port: 10003
      targetPort: 10003
      name: grpc-authservice
      protocol: TCP
    - port: 10004
      targetPort: 10004
      name: grpc-health
      protocol: TCP
  selector:
    app: authservice
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authservice
  namespace: authservice
  labels:
    app: authservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authservice
  namespace: authservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authservice
      version: v1
  template:
    metadata:
      labels:
        app: authservice
        version: v1
    spec:
      serviceAccountName: authservice
      containers:
        - name: authservice
          # This image is automatically generated by the e2e test setup in the `make kind-load` target
          image: kind-local/authservice:e2e
          imagePullPolicy: Never # Load directly from kind
          ports:
            - name: authz
              containerPort: 10003
              protocol: TCP
            - name: health
              containerPort: 10004
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/authservice
          livenessProbe:
            initialDelaySeconds: 1
            periodSeconds: 5
            tcpSocket:
              port: 10003
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            httpGet:
              port: 10004
              path: /healthz
      volumes:
        - name: config
          configMap:
            name: authservice-config
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: authservice-secrets
  namespace: authservice
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authservice-secrets
  namespace: authservice
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: authservice-secrets
subjects:
  - kind: ServiceAccount
    name: authservice
    namespace: authservice
---
apiVersion: v1
kind: Secret
metadata:
  name: client-secret
  namespace: authservice
type: Opaque
stringData:
  client-secret: "authservice-secret"
---
apiVersion: v1
kind: Secret
metadata:
  name: client-secret-exchange
  namespace: authservice
type: Opaque
stringData:
  client-secret: "authservice-secret"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: authservice-config
  namespace: authservice
data:
  config.json: |
    {
      "listen_address": "0.0.0.0",
      "listen_port": "10003",
      "log_level": "debug",
      "allow_unmatched_requests": false,
      "chains": [
        {
          "name": "keycloak",
          "filters": [
            {
              "oidc":
              {
                "configuration_uri": "http://keycloak.keycloak:8080/realms/master/.well-known/openid-configuration",
                "callback_uri": "https://http-echo.authservice.internal/callback",
                "client_id": "authservice",
                "client_secret_ref": {
                  "namespace": "authservice",
                  "name": "client-secret"
                },
                "cookie_name_prefix": "authservice",
                "id_token": {
                  "preamble": "Bearer",
                  "header": "authorization"
                },
                "access_token": {
                  "header": "x-access-token"
                },
                "redis_session_store_config": {
                  "server_uri": "redis://redis.redis.svc.cluster.local:6379"
                },
                "token_exchange": {
                  "token_exchange_uri": "http://keycloak.keycloak:8080/realms/master/protocol/openid-connect/token",
                  "client_credentials": {
                    "client_id": "authservice",
                    "client_secret_ref": {
                      "namespace": "authservice",
                      "name": "client-secret-exchange"
                    }
                  }
                }
              }
            }
          ]
        }
      ]
    }
